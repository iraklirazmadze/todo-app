{"ast":null,"code":"import stripAnsi from 'strip-ansi';\nimport eastAsianWidth from 'eastasianwidth';\nimport emojiRegex from 'emoji-regex';\nexport default function stringWidth(string) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof string !== 'string' || string.length === 0) {\n    return 0;\n  }\n\n  options = {\n    ambiguousIsNarrow: true,\n    ...options\n  };\n  string = stripAnsi(string);\n\n  if (string.length === 0) {\n    return 0;\n  }\n\n  string = string.replace(emojiRegex(), '  ');\n  const ambiguousCharacterWidth = options.ambiguousIsNarrow ? 1 : 2;\n  let width = 0;\n\n  for (const character of string) {\n    const codePoint = character.codePointAt(0); // Ignore control characters\n\n    if (codePoint <= 0x1F || codePoint >= 0x7F && codePoint <= 0x9F) {\n      continue;\n    } // Ignore combining characters\n\n\n    if (codePoint >= 0x300 && codePoint <= 0x36F) {\n      continue;\n    }\n\n    const code = eastAsianWidth.eastAsianWidth(character);\n\n    switch (code) {\n      case 'F':\n      case 'W':\n        width += 2;\n        break;\n\n      case 'A':\n        width += ambiguousCharacterWidth;\n        break;\n\n      default:\n        width += 1;\n    }\n  }\n\n  return width;\n}","map":{"version":3,"names":["stripAnsi","eastAsianWidth","emojiRegex","stringWidth","string","options","length","ambiguousIsNarrow","replace","ambiguousCharacterWidth","width","character","codePoint","codePointAt","code"],"sources":["/home/razma/node_modules/string-width/index.js"],"sourcesContent":["import stripAnsi from 'strip-ansi';\nimport eastAsianWidth from 'eastasianwidth';\nimport emojiRegex from 'emoji-regex';\n\nexport default function stringWidth(string, options = {}) {\n\tif (typeof string !== 'string' || string.length === 0) {\n\t\treturn 0;\n\t}\n\n\toptions = {\n\t\tambiguousIsNarrow: true,\n\t\t...options\n\t};\n\n\tstring = stripAnsi(string);\n\n\tif (string.length === 0) {\n\t\treturn 0;\n\t}\n\n\tstring = string.replace(emojiRegex(), '  ');\n\n\tconst ambiguousCharacterWidth = options.ambiguousIsNarrow ? 1 : 2;\n\tlet width = 0;\n\n\tfor (const character of string) {\n\t\tconst codePoint = character.codePointAt(0);\n\n\t\t// Ignore control characters\n\t\tif (codePoint <= 0x1F || (codePoint >= 0x7F && codePoint <= 0x9F)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Ignore combining characters\n\t\tif (codePoint >= 0x300 && codePoint <= 0x36F) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst code = eastAsianWidth.eastAsianWidth(character);\n\t\tswitch (code) {\n\t\t\tcase 'F':\n\t\t\tcase 'W':\n\t\t\t\twidth += 2;\n\t\t\t\tbreak;\n\t\t\tcase 'A':\n\t\t\t\twidth += ambiguousCharacterWidth;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\twidth += 1;\n\t\t}\n\t}\n\n\treturn width;\n}\n"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,gBAA3B;AACA,OAAOC,UAAP,MAAuB,aAAvB;AAEA,eAAe,SAASC,WAAT,CAAqBC,MAArB,EAA2C;EAAA,IAAdC,OAAc,uEAAJ,EAAI;;EACzD,IAAI,OAAOD,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACE,MAAP,KAAkB,CAApD,EAAuD;IACtD,OAAO,CAAP;EACA;;EAEDD,OAAO,GAAG;IACTE,iBAAiB,EAAE,IADV;IAET,GAAGF;EAFM,CAAV;EAKAD,MAAM,GAAGJ,SAAS,CAACI,MAAD,CAAlB;;EAEA,IAAIA,MAAM,CAACE,MAAP,KAAkB,CAAtB,EAAyB;IACxB,OAAO,CAAP;EACA;;EAEDF,MAAM,GAAGA,MAAM,CAACI,OAAP,CAAeN,UAAU,EAAzB,EAA6B,IAA7B,CAAT;EAEA,MAAMO,uBAAuB,GAAGJ,OAAO,CAACE,iBAAR,GAA4B,CAA5B,GAAgC,CAAhE;EACA,IAAIG,KAAK,GAAG,CAAZ;;EAEA,KAAK,MAAMC,SAAX,IAAwBP,MAAxB,EAAgC;IAC/B,MAAMQ,SAAS,GAAGD,SAAS,CAACE,WAAV,CAAsB,CAAtB,CAAlB,CAD+B,CAG/B;;IACA,IAAID,SAAS,IAAI,IAAb,IAAsBA,SAAS,IAAI,IAAb,IAAqBA,SAAS,IAAI,IAA5D,EAAmE;MAClE;IACA,CAN8B,CAQ/B;;;IACA,IAAIA,SAAS,IAAI,KAAb,IAAsBA,SAAS,IAAI,KAAvC,EAA8C;MAC7C;IACA;;IAED,MAAME,IAAI,GAAGb,cAAc,CAACA,cAAf,CAA8BU,SAA9B,CAAb;;IACA,QAAQG,IAAR;MACC,KAAK,GAAL;MACA,KAAK,GAAL;QACCJ,KAAK,IAAI,CAAT;QACA;;MACD,KAAK,GAAL;QACCA,KAAK,IAAID,uBAAT;QACA;;MACD;QACCC,KAAK,IAAI,CAAT;IATF;EAWA;;EAED,OAAOA,KAAP;AACA"},"metadata":{},"sourceType":"module"}