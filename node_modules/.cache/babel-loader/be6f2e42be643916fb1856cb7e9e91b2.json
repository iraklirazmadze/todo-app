{"ast":null,"code":"import { fromEvent } from 'rxjs';\nimport { filter, map, share, takeUntil } from 'rxjs';\n\nfunction normalizeKeypressEvents(value, key) {\n  return {\n    value,\n    key: key || {}\n  };\n}\n\nexport default function (rl) {\n  const keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents).pipe(takeUntil(fromEvent(rl, 'close'))) // Ignore `enter` key. On the readline, we only care about the `line` event.\n  .pipe(filter(_ref => {\n    let {\n      key\n    } = _ref;\n    return key.name !== 'enter' && key.name !== 'return';\n  }));\n  return {\n    line: fromEvent(rl, 'line'),\n    keypress,\n    normalizedUpKey: keypress.pipe(filter(_ref2 => {\n      let {\n        key\n      } = _ref2;\n      return key.name === 'up' || key.name === 'k' || key.name === 'p' && key.ctrl;\n    }), share()),\n    normalizedDownKey: keypress.pipe(filter(_ref3 => {\n      let {\n        key\n      } = _ref3;\n      return key.name === 'down' || key.name === 'j' || key.name === 'n' && key.ctrl;\n    }), share()),\n    numberKey: keypress.pipe(filter(e => e.value && '123456789'.indexOf(e.value) >= 0), map(e => Number(e.value)), share()),\n    spaceKey: keypress.pipe(filter(_ref4 => {\n      let {\n        key\n      } = _ref4;\n      return key && key.name === 'space';\n    }), share()),\n    aKey: keypress.pipe(filter(_ref5 => {\n      let {\n        key\n      } = _ref5;\n      return key && key.name === 'a';\n    }), share()),\n    iKey: keypress.pipe(filter(_ref6 => {\n      let {\n        key\n      } = _ref6;\n      return key && key.name === 'i';\n    }), share())\n  };\n}","map":{"version":3,"names":["fromEvent","filter","map","share","takeUntil","normalizeKeypressEvents","value","key","rl","keypress","input","pipe","name","line","normalizedUpKey","ctrl","normalizedDownKey","numberKey","e","indexOf","Number","spaceKey","aKey","iKey"],"sources":["/home/razma/node_modules/inquirer/lib/utils/events.js"],"sourcesContent":["import { fromEvent } from 'rxjs';\nimport { filter, map, share, takeUntil } from 'rxjs';\n\nfunction normalizeKeypressEvents(value, key) {\n  return { value, key: key || {} };\n}\n\nexport default function (rl) {\n  const keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents)\n    .pipe(takeUntil(fromEvent(rl, 'close')))\n    // Ignore `enter` key. On the readline, we only care about the `line` event.\n    .pipe(filter(({ key }) => key.name !== 'enter' && key.name !== 'return'));\n\n  return {\n    line: fromEvent(rl, 'line'),\n    keypress,\n\n    normalizedUpKey: keypress.pipe(\n      filter(\n        ({ key }) =>\n          key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl)\n      ),\n      share()\n    ),\n\n    normalizedDownKey: keypress.pipe(\n      filter(\n        ({ key }) =>\n          key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl)\n      ),\n      share()\n    ),\n\n    numberKey: keypress.pipe(\n      filter((e) => e.value && '123456789'.indexOf(e.value) >= 0),\n      map((e) => Number(e.value)),\n      share()\n    ),\n\n    spaceKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'space'),\n      share()\n    ),\n    aKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'a'),\n      share()\n    ),\n    iKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'i'),\n      share()\n    ),\n  };\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,MAA1B;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,KAAtB,EAA6BC,SAA7B,QAA8C,MAA9C;;AAEA,SAASC,uBAAT,CAAiCC,KAAjC,EAAwCC,GAAxC,EAA6C;EAC3C,OAAO;IAAED,KAAF;IAASC,GAAG,EAAEA,GAAG,IAAI;EAArB,CAAP;AACD;;AAED,eAAe,UAAUC,EAAV,EAAc;EAC3B,MAAMC,QAAQ,GAAGT,SAAS,CAACQ,EAAE,CAACE,KAAJ,EAAW,UAAX,EAAuBL,uBAAvB,CAAT,CACdM,IADc,CACTP,SAAS,CAACJ,SAAS,CAACQ,EAAD,EAAK,OAAL,CAAV,CADA,EAEf;EAFe,CAGdG,IAHc,CAGTV,MAAM,CAAC;IAAA,IAAC;MAAEM;IAAF,CAAD;IAAA,OAAaA,GAAG,CAACK,IAAJ,KAAa,OAAb,IAAwBL,GAAG,CAACK,IAAJ,KAAa,QAAlD;EAAA,CAAD,CAHG,CAAjB;EAKA,OAAO;IACLC,IAAI,EAAEb,SAAS,CAACQ,EAAD,EAAK,MAAL,CADV;IAELC,QAFK;IAILK,eAAe,EAAEL,QAAQ,CAACE,IAAT,CACfV,MAAM,CACJ;MAAA,IAAC;QAAEM;MAAF,CAAD;MAAA,OACEA,GAAG,CAACK,IAAJ,KAAa,IAAb,IAAqBL,GAAG,CAACK,IAAJ,KAAa,GAAlC,IAA0CL,GAAG,CAACK,IAAJ,KAAa,GAAb,IAAoBL,GAAG,CAACQ,IADpE;IAAA,CADI,CADS,EAKfZ,KAAK,EALU,CAJZ;IAYLa,iBAAiB,EAAEP,QAAQ,CAACE,IAAT,CACjBV,MAAM,CACJ;MAAA,IAAC;QAAEM;MAAF,CAAD;MAAA,OACEA,GAAG,CAACK,IAAJ,KAAa,MAAb,IAAuBL,GAAG,CAACK,IAAJ,KAAa,GAApC,IAA4CL,GAAG,CAACK,IAAJ,KAAa,GAAb,IAAoBL,GAAG,CAACQ,IADtE;IAAA,CADI,CADW,EAKjBZ,KAAK,EALY,CAZd;IAoBLc,SAAS,EAAER,QAAQ,CAACE,IAAT,CACTV,MAAM,CAAEiB,CAAD,IAAOA,CAAC,CAACZ,KAAF,IAAW,YAAYa,OAAZ,CAAoBD,CAAC,CAACZ,KAAtB,KAAgC,CAAnD,CADG,EAETJ,GAAG,CAAEgB,CAAD,IAAOE,MAAM,CAACF,CAAC,CAACZ,KAAH,CAAd,CAFM,EAGTH,KAAK,EAHI,CApBN;IA0BLkB,QAAQ,EAAEZ,QAAQ,CAACE,IAAT,CACRV,MAAM,CAAC;MAAA,IAAC;QAAEM;MAAF,CAAD;MAAA,OAAaA,GAAG,IAAIA,GAAG,CAACK,IAAJ,KAAa,OAAjC;IAAA,CAAD,CADE,EAERT,KAAK,EAFG,CA1BL;IA8BLmB,IAAI,EAAEb,QAAQ,CAACE,IAAT,CACJV,MAAM,CAAC;MAAA,IAAC;QAAEM;MAAF,CAAD;MAAA,OAAaA,GAAG,IAAIA,GAAG,CAACK,IAAJ,KAAa,GAAjC;IAAA,CAAD,CADF,EAEJT,KAAK,EAFD,CA9BD;IAkCLoB,IAAI,EAAEd,QAAQ,CAACE,IAAT,CACJV,MAAM,CAAC;MAAA,IAAC;QAAEM;MAAF,CAAD;MAAA,OAAaA,GAAG,IAAIA,GAAG,CAACK,IAAJ,KAAa,GAAjC;IAAA,CAAD,CADF,EAEJT,KAAK,EAFD;EAlCD,CAAP;AAuCD"},"metadata":{},"sourceType":"module"}