{"ast":null,"code":"import defaults from 'lodash/defaults.js';\nimport clone from 'lodash/clone.js';\n/**\n * Base prompt implementation\n * Should be extended by prompt types.\n */\n\nconst _ = {\n  defaults,\n  clone\n};\nimport chalk from 'chalk';\nimport runAsync from 'run-async';\nimport { filter, flatMap, share, take, takeUntil } from 'rxjs';\nimport Choices from '../objects/choices.js';\nimport ScreenManager from '../utils/screen-manager.js';\nexport default class Prompt {\n  constructor(question, rl, answers) {\n    // Setup instance defaults property\n    Object.assign(this, {\n      answers,\n      status: 'pending'\n    }); // Set defaults prompt options\n\n    this.opt = _.defaults(_.clone(question), {\n      validate: () => true,\n      validatingText: '',\n      filter: val => val,\n      filteringText: '',\n      when: () => true,\n      suffix: '',\n      prefix: chalk.green('?')\n    }); // Make sure name is present\n\n    if (!this.opt.name) {\n      this.throwParamError('name');\n    } // Set default message if no message defined\n\n\n    if (!this.opt.message) {\n      this.opt.message = this.opt.name + ':';\n    } // Normalize choices\n\n\n    if (Array.isArray(this.opt.choices)) {\n      this.opt.choices = new Choices(this.opt.choices, answers);\n    }\n\n    this.rl = rl;\n    this.screen = new ScreenManager(this.rl);\n  }\n  /**\n   * Start the Inquiry session and manage output value filtering\n   * @return {Promise}\n   */\n\n\n  run() {\n    return new Promise((resolve, reject) => {\n      this._run(value => resolve(value), error => reject(error));\n    });\n  } // Default noop (this one should be overwritten in prompts)\n\n\n  _run(cb) {\n    cb();\n  }\n  /**\n   * Throw an error telling a required parameter is missing\n   * @param  {String} name Name of the missing param\n   * @return {Throw Error}\n   */\n\n\n  throwParamError(name) {\n    throw new Error('You must provide a `' + name + '` parameter');\n  }\n  /**\n   * Called when the UI closes. Override to do any specific cleanup necessary\n   */\n\n\n  close() {\n    this.screen.releaseCursor();\n  }\n  /**\n   * Run the provided validation method each time a submit event occur.\n   * @param  {Rx.Observable} submit - submit event flow\n   * @return {Object}        Object containing two observables: `success` and `error`\n   */\n\n\n  handleSubmitEvents(submit) {\n    const self = this;\n    const validate = runAsync(this.opt.validate);\n    const asyncFilter = runAsync(this.opt.filter);\n    const validation = submit.pipe(flatMap(value => {\n      this.startSpinner(value, this.opt.filteringText);\n      return asyncFilter(value, self.answers).then(filteredValue => {\n        this.startSpinner(filteredValue, this.opt.validatingText);\n        return validate(filteredValue, self.answers).then(isValid => ({\n          isValid,\n          value: filteredValue\n        }), err => ({\n          isValid: err,\n          value: filteredValue\n        }));\n      }, err => ({\n        isValid: err\n      }));\n    }), share());\n    const success = validation.pipe(filter(state => state.isValid === true), take(1));\n    const error = validation.pipe(filter(state => state.isValid !== true), takeUntil(success));\n    return {\n      success,\n      error\n    };\n  }\n\n  startSpinner(value, bottomContent) {\n    value = this.getSpinningValue(value); // If the question will spin, cut off the prefix (for layout purposes)\n\n    const content = bottomContent ? this.getQuestion() + value : this.getQuestion().slice(this.opt.prefix.length + 1) + value;\n    this.screen.renderWithSpinner(content, bottomContent);\n  }\n  /**\n   * Allow override, e.g. for password prompts\n   * See: https://github.com/SBoudrias/Inquirer.js/issues/1022\n   *\n   * @return {String} value to display while spinning\n   */\n\n\n  getSpinningValue(value) {\n    return value;\n  }\n  /**\n   * Generate the prompt question string\n   * @return {String} prompt question string\n   */\n\n\n  getQuestion() {\n    let message = (this.opt.prefix ? this.opt.prefix + ' ' : '') + chalk.bold(this.opt.message) + this.opt.suffix + chalk.reset(' '); // Append the default if available, and if question isn't touched/answered\n\n    if (this.opt.default != null && this.status !== 'touched' && this.status !== 'answered') {\n      // If default password is supplied, hide it\n      if (this.opt.type === 'password') {\n        message += chalk.italic.dim('[hidden] ');\n      } else {\n        message += chalk.dim('(' + this.opt.default + ') ');\n      }\n    }\n\n    return message;\n  }\n\n}","map":{"version":3,"names":["defaults","clone","_","chalk","runAsync","filter","flatMap","share","take","takeUntil","Choices","ScreenManager","Prompt","constructor","question","rl","answers","Object","assign","status","opt","validate","validatingText","val","filteringText","when","suffix","prefix","green","name","throwParamError","message","Array","isArray","choices","screen","run","Promise","resolve","reject","_run","value","error","cb","Error","close","releaseCursor","handleSubmitEvents","submit","self","asyncFilter","validation","pipe","startSpinner","then","filteredValue","isValid","err","success","state","bottomContent","getSpinningValue","content","getQuestion","slice","length","renderWithSpinner","bold","reset","default","type","italic","dim"],"sources":["/home/razma/node_modules/inquirer/lib/prompts/base.js"],"sourcesContent":["import defaults from 'lodash/defaults.js';\nimport clone from 'lodash/clone.js';\n/**\n * Base prompt implementation\n * Should be extended by prompt types.\n */\nconst _ = {\n  defaults,\n  clone,\n};\n\nimport chalk from 'chalk';\nimport runAsync from 'run-async';\nimport { filter, flatMap, share, take, takeUntil } from 'rxjs';\nimport Choices from '../objects/choices.js';\nimport ScreenManager from '../utils/screen-manager.js';\n\nexport default class Prompt {\n  constructor(question, rl, answers) {\n    // Setup instance defaults property\n    Object.assign(this, {\n      answers,\n      status: 'pending',\n    });\n\n    // Set defaults prompt options\n    this.opt = _.defaults(_.clone(question), {\n      validate: () => true,\n      validatingText: '',\n      filter: (val) => val,\n      filteringText: '',\n      when: () => true,\n      suffix: '',\n      prefix: chalk.green('?'),\n    });\n\n    // Make sure name is present\n    if (!this.opt.name) {\n      this.throwParamError('name');\n    }\n\n    // Set default message if no message defined\n    if (!this.opt.message) {\n      this.opt.message = this.opt.name + ':';\n    }\n\n    // Normalize choices\n    if (Array.isArray(this.opt.choices)) {\n      this.opt.choices = new Choices(this.opt.choices, answers);\n    }\n\n    this.rl = rl;\n    this.screen = new ScreenManager(this.rl);\n  }\n\n  /**\n   * Start the Inquiry session and manage output value filtering\n   * @return {Promise}\n   */\n\n  run() {\n    return new Promise((resolve, reject) => {\n      this._run(\n        (value) => resolve(value),\n        (error) => reject(error)\n      );\n    });\n  }\n\n  // Default noop (this one should be overwritten in prompts)\n  _run(cb) {\n    cb();\n  }\n\n  /**\n   * Throw an error telling a required parameter is missing\n   * @param  {String} name Name of the missing param\n   * @return {Throw Error}\n   */\n\n  throwParamError(name) {\n    throw new Error('You must provide a `' + name + '` parameter');\n  }\n\n  /**\n   * Called when the UI closes. Override to do any specific cleanup necessary\n   */\n  close() {\n    this.screen.releaseCursor();\n  }\n\n  /**\n   * Run the provided validation method each time a submit event occur.\n   * @param  {Rx.Observable} submit - submit event flow\n   * @return {Object}        Object containing two observables: `success` and `error`\n   */\n  handleSubmitEvents(submit) {\n    const self = this;\n    const validate = runAsync(this.opt.validate);\n    const asyncFilter = runAsync(this.opt.filter);\n    const validation = submit.pipe(\n      flatMap((value) => {\n        this.startSpinner(value, this.opt.filteringText);\n        return asyncFilter(value, self.answers).then(\n          (filteredValue) => {\n            this.startSpinner(filteredValue, this.opt.validatingText);\n            return validate(filteredValue, self.answers).then(\n              (isValid) => ({ isValid, value: filteredValue }),\n              (err) => ({ isValid: err, value: filteredValue })\n            );\n          },\n          (err) => ({ isValid: err })\n        );\n      }),\n      share()\n    );\n\n    const success = validation.pipe(\n      filter((state) => state.isValid === true),\n      take(1)\n    );\n    const error = validation.pipe(\n      filter((state) => state.isValid !== true),\n      takeUntil(success)\n    );\n\n    return {\n      success,\n      error,\n    };\n  }\n\n  startSpinner(value, bottomContent) {\n    value = this.getSpinningValue(value);\n    // If the question will spin, cut off the prefix (for layout purposes)\n    const content = bottomContent\n      ? this.getQuestion() + value\n      : this.getQuestion().slice(this.opt.prefix.length + 1) + value;\n\n    this.screen.renderWithSpinner(content, bottomContent);\n  }\n\n  /**\n   * Allow override, e.g. for password prompts\n   * See: https://github.com/SBoudrias/Inquirer.js/issues/1022\n   *\n   * @return {String} value to display while spinning\n   */\n  getSpinningValue(value) {\n    return value;\n  }\n\n  /**\n   * Generate the prompt question string\n   * @return {String} prompt question string\n   */\n  getQuestion() {\n    let message =\n      (this.opt.prefix ? this.opt.prefix + ' ' : '') +\n      chalk.bold(this.opt.message) +\n      this.opt.suffix +\n      chalk.reset(' ');\n\n    // Append the default if available, and if question isn't touched/answered\n    if (\n      this.opt.default != null &&\n      this.status !== 'touched' &&\n      this.status !== 'answered'\n    ) {\n      // If default password is supplied, hide it\n      if (this.opt.type === 'password') {\n        message += chalk.italic.dim('[hidden] ');\n      } else {\n        message += chalk.dim('(' + this.opt.default + ') ');\n      }\n    }\n\n    return message;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}